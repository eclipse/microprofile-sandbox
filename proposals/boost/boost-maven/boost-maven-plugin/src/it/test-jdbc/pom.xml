<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>boost</groupId>
	<artifactId>test-jdbc</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<pluginRepositories>
		<!-- Configure Sonatype OSS Maven snapshots repository -->
		<pluginRepository>
			<id>sonatype-nexus-snapshots</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
			<releases>
				<enabled>false</enabled>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>boost.boosters</groupId>
				<artifactId>mp20-bom</artifactId>
				<version>0.1.3-SNAPSHOT</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!-- Boosters -->
		<dependency>
			<groupId>boost.boosters</groupId>
			<artifactId>jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>boost.boosters</groupId>
			<artifactId>jaxrs</artifactId>
		</dependency>
		<dependency>
			<groupId>boost.boosters</groupId>
			<artifactId>mpHealth</artifactId>
		</dependency>
		<dependency>
			<groupId>boost.boosters</groupId>
			<artifactId>mpRestClient</artifactId>
		</dependency>
		<dependency>
			<groupId>boost.boosters</groupId>
			<artifactId>cdi</artifactId>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
			<version>3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.5</version>
		</dependency>


	</dependencies>

	<profiles>
		<!-- Java 11 dependencies -->
	    <profile>
            <id>java-11</id>
            <activation>
                <jdk>[11,)</jdk>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>javax.annotation</groupId>
                    <artifactId>javax.annotation-api</artifactId>
                    <version>1.3.2</version>
                </dependency>
            </dependencies>
      </profile>
		<!-- Runtimes -->
		<profile>
			<id>ol</id>
			<activation>
				<property>
					<name>boostRuntime</name>
					<value>ol</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>boost.runtimes</groupId>
					<artifactId>openliberty</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>wlp</id>
			<activation>
				<property>
					<name>boostRuntime</name>
					<value>wlp</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>boost.runtimes</groupId>
					<artifactId>wlp</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>tomee</id>
			<activation>
				<property>
					<name>boostRuntime</name>
					<value>tomee</value>
				</property>
			</activation>
			<dependencies>
				<dependency>
					<groupId>boost.runtimes</groupId>
					<artifactId>tomee</artifactId>
				</dependency>
			</dependencies>
		</profile>

		<!-- Profile to enable Derby as the database -->
		<profile>
			<id>derby</id>
			<properties>
				<db.includes>DerbyHealthCheckIT</db.includes>
			</properties>

			<dependencies>
				<dependency>
					<groupId>org.apache.derby</groupId>
					<artifactId>derby</artifactId>
					<version>10.14.2.0</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
		</profile>

		<!-- Profile to enable MySQL as the database, and start it in a docker 
			dontainer -->
		<profile>
			<id>mysql</id>
			<properties>
				<db.includes>MysqlHealthCheckIT</db.includes>
			</properties>

			<dependencies>
				<dependency>
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
					<version>8.0.16</version>
					<scope>runtime</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.20.1</version>
						<configuration>
							<images>
								<image>
									<alias>database</alias>
									<name>mysql:8.0.15</name>
									<run>
										<wait>
											<!-- There is a known issue in the plugin preventing any reasonable 
												ability to wait for mysql to start when on Mac. Waiting 15 seconds does the 
												trick for now -->
											<time>30000</time>
										</wait>
										<env>
											<MYSQL_ROOT_PASSWORD>abc123</MYSQL_ROOT_PASSWORD>
											<MYSQL_DATABASE>testdb</MYSQL_DATABASE>
											<MYSQL_USER>mysql</MYSQL_USER>
											<MYSQL_PASSWORD>mysql</MYSQL_PASSWORD>
										</env>
										<ports>
											<port>3306:3306</port>
										</ports>
									</run>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>docker:stop-before</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:stop-after</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- NOTE: There is no way to start DB2 in a docker container using the 
			docker-maven-plugin. For this reason, DB2 tests are in a separate test-jdbc-db2 
			IT project. That IT does basic configuration checks. -->
	</profiles>


	<build>
		<plugins>
			<plugin>
				<groupId>boost</groupId>
				<artifactId>boost-maven-plugin</artifactId>
				<version>0.1.3-SNAPSHOT</version>
				<executions>
					<execution>
						<goals>
							<goal>package</goal>
						</goals>
					</execution>
					<execution>
						<id>test-start-server</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>test-stop-server</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<includes>
						<include>${db.includes}</include>
					</includes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<systemPropertyVariables>
								<test.port>${boost.http.port}</test.port>
							</systemPropertyVariables>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.1</version>
				<configuration>
					<source>1.8</source>
					<target>8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>

//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
[[at_context]]
=== @Context

Injects the GraphQL context object of the query in a parameter of a resolver method. 

The context is generally used to hold objects that needs to be shared across the successive resolvers involved in the current query 
(eg. to assign a connections pool on a database for the current query and its subqueries).

.Example
[source,java,numbered]
----
public class CharacterService {

  @Inject TwitterService twitterService;
  
  // Other Query regarding a character...
  
  @Query(name = "tweets", description = "Get the last tweets for a character")
  public List<Tweet> tweets(
                         @Source(fieldName = "tweetsForMe", description = "Get the last tweets for the character") Character character,
                         @Argument(name = "last", description = "Number of     last tweets to fetch") int last,
                         @Context QGLContext context,
                         @Info QGLInfo info) {
    return twitterService.search(character.getName(), last);
  }
}
----

Resulting schema SDL:

[source,json,numbered]
----
type Character {
  # Other characterâ€™s fields ...
  tweetsForMe: [Tweet]
}
----
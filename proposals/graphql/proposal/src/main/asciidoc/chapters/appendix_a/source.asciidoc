//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
[[at_source]]
=== @Source

Extends a GraphQL type by adding an externally defined field, effectively enabling a graph to be assembled. 

The GraphQL type which is extended is the GraphQL type corresponding to the Java type of the annotated method parameter.

The added field type can be a scalar or another GraphQL type, it is inferred from the method return type.

At runtime, injects the concerned source object (which type is the extended GraphQL type), thus allowing to use fields from it to resolve the added field.

Optionally, specifies the name and description of the added field in the extended GraphQL type. By default, the name of the added field is the name of the method.

.Parameters
[cols="1,1"]
|===
|*fieldName*|The name of the field
|*description*|The description of the corresponding input object field
|===

.Example
[source,java,numbered]
----
public class CharacterService {

  @Inject TwitterService twitterService;
  
  // Other Query regarding a character...
  
  @Query(name = "tweets", description = "Get the last tweets for a character")
  public List<Tweet> tweets(
                         @Source(fieldName = "tweetsForMe", description = "Get the last tweets for the character") Character character,
                         @Argument(name = "last", description = "Number of last tweets to fetch") int last,
                         @Context QGLContext context,
                         @Info QGLInfo info) {
    return twitterService.search(character.getName(), last);
  }
}
----

Resulting schema SDL:

[source,json,numbered]
----
type Character {
  # Other characterâ€™s fields ...
  tweetsForMe: [Tweet]
}
----
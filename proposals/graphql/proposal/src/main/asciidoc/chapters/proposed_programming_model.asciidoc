//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
[[proposed_programming_model]]
== Proposed Programming Model

The programming model should be free to evolve as we learn more about the technology, but the general idea is to provide annotations that would expose queries and mutations (CRUD operations) and define entities. 
These annotations would be similar to JAX-RS and JSON-B annotations. Here is an example (taken from the https://github.com/thejibz/graphql-starwars[Starwars example]):

[source,java,numbered]
----
@Query(value = "friendsOf", description = "Returns all the friends of a character")
public List<Character> getFriendsOf(Character character) {
    // Fetch the characters...
}
----

[source,java,numbered]
----
@Mutation(value = "addCharacter", description = "Save a new character")
public Character save(Character character) {
    // Add character
}
----

The proposed way to handle Exceptions would be very similar to JAX-RS. 
The simplest usage would be to just return the details of the error, and the default when the endpoint returns a POJO, so something like this:

[source,java,numbered]
----
@Provider
public class CharacterNotFoundExceptionMapper implements ExceptionMapper<CharacterNotFoundException> {

    @Override
    public Response toResponse(CharacterNotFoundException exception) {
        // Create response
    }
}
----

GraphQL allows partial responses, so the response can contain both partial valid data and error details, then it might be something like:

[source,java,numbered]
----
@Provider
public class CharacterNotFoundExceptionMapper implements PartialExceptionMapper<Movie movie, CharacterNotFoundException> {

    @Override
    public Response toResponse(Movie movie, CharacterNotFoundException exception) {
        // Create response	
    }
}
----

For more details see: <<appendix_a>>.

Like REST, GraphQL is not restricted to HTTP as the transport layer. 
The intent of this project is to provide a default transport layer built on HTTP, 
but to make the programming model extensible such that these APIs could be used with alternative transport mechanisms - this alternate transport mechanism would be part of a v2 or later release.  
